import '../wild_type/wild_type.onemodel'
import '../wild_type/protein_constitutive.onemodel'
import '../wild_type/protein_induced.onemodel'

model AntitheticController (WildType)
  z1  = ProteinConstitutive()  # Sigma protein.
  z2  = ProteinInduced()       # Anti-sigma protein.
  z12 = ProteinConstitutive()  # Sigma and anti-sigma protein.
  x   = ProteinInduced()       # Protein of interest.

  species ref = 0  # Antithetic reference.

  parameter
    # If 1, burden of the antithetic controller is taken into account.
    # If 0, burden of the antithetic is neglected.
    __burden = 1
    # If 1, dilution of the antithetic controller is taken into account
    # If 0, dilution of the antithetic controller neglected.
    __dilution = 1
  end

  parameter
    # Antithetic sequestration affininty (1/molec/min).
    gamma = 100
    z1.omega = 70
    z2.omega_max = 100
    # z12 is just produced by the antithetic reaction.
    z12.omega = 0
    x.omega_max = 100
  end

  rule
    x.TF := z1.m
    z2.TF := x.m
    ref := z1.omega / z2.omega_max *z2.h
  end

  reaction
    z1.m + z2.m -> z12.m ; gamma*z1.m*z2.m
    0 -> z1.m ; mu*z1.m*(1-__dilution)
    0 -> z2.m ; mu*z2.m*(1-__dilution)
  end

  # Add protein z1 to the model.
  rule
    z1.nu_t := nu_t
    z1.mu := mu
    z1.r := r
    z1.m_h := m_h
    z1.J_host_sum := J_host_sum
  end

  # Add protein z2 to the model.
  rule
    z2.nu_t := nu_t
    z2.mu := mu
    z2.r := r
    z2.m_h := m_h
    z2.J_host_sum := J_host_sum
  end

  # Add protein z12 to the model.
  rule
    z12.nu_t := nu_t
    z12.mu := mu
    z12.r := r
    z12.m_h := m_h
    z12.J_host_sum := J_host_sum
  end

  # Add protein x to the model.
  rule
    x.nu_t := nu_t
    x.mu := mu
    x.r := r
    x.m_h := m_h
    x.J_host_sum := J_host_sum
  end

  # Override equations.
  rule
    WSum_equation:  WSum := p_r.W + p_nr.W + (z1.W + z2.W + z12.W + x.W)*__burden
    m_p_equation:    m_p := p_r.m + p_nr.m + (z1.m + z2.m + z12.m + x.m)*__burden
  end
end

standalone
  import '../mass_equation/mass_interpolated.onemodel'

  mass = MassInterpolated()
  cell = AntitheticController()

  parameter
    __t_end = 1000
    s = 3.6
  end

  rule
    cell.s := s
    mass.mu := cell.mu
    cell.m_h := mass.m_h
  end
end
