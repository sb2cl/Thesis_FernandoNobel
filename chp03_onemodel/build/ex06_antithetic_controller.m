classdef ex06_antithetic_controller
	% This file was automatically generated by OneModel.
	% Any changes you make to it will be overwritten the next time
	% the file is generated.

	properties
		p      % Default model parameters.
		x0     % Default initial conditions.
		M      % Mass matrix for DAE systems.
		opts   % Simulation options.
	end

	methods
		function obj = ex06_antithetic_controller()
			%% Constructor of ex06_antithetic_controller.
			obj.p    = obj.default_parameters();
			obj.x0   = obj.initial_conditions();
			obj.M    = obj.mass_matrix();
			obj.opts = obj.simulation_options();
		end

		function p = default_parameters(~)
			%% Default parameters value.
			p = [];
			p.circuit__z1__k_m = 1.0;
			p.circuit__z1__d_m = 1.0;
			p.circuit__z1__k_p = 1.0;
			p.circuit__z1__d_p = 1.0;
			p.circuit__z2__d_m = 1.0;
			p.circuit__z2__k_p = 1.0;
			p.circuit__z2__d_p = 1.0;
			p.circuit__z2__h = 1.0;
			p.circuit__z2__k_m_max = 1.0;
			p.circuit__x__d_m = 1.0;
			p.circuit__x__k_p = 1.0;
			p.circuit__x__d_p = 1.0;
			p.circuit__x__h = 1.0;
			p.circuit__x__k_m_max = 1.0;
			p.circuit__gamma = 1.0;
		end

		function x0 = initial_conditions(~)
			%% Default initial conditions.
			x0 = [
				0.0 % circuit__z1__mRNA
				0.0 % circuit__z1__protein
				0.0 % circuit__z2__mRNA
				0.0 % circuit__z2__protein
				0.0 % circuit__x__mRNA
				0.0 % circuit__x__protein
			];
		end

		function M = mass_matrix(~)
			%% Mass matrix for DAE systems.
			M = [
				1 0 0 0 0 0 
				0 1 0 0 0 0 
				0 0 1 0 0 0 
				0 0 0 1 0 0 
				0 0 0 0 1 0 
				0 0 0 0 0 1 
			];
		end

		function opts = simulation_options(~)
			%% Default simulation options.
			opts.t_end = 10.0;
			opts.t_init = 0.0;
		end

		function dx = ode(~,t,x,p)
			%% Evaluate the ODE.
			%
			% Args:
			%	 t Current time in the simulation.
			%	 x Array with the state value.
			%	 p Struct with the parameters.
			%
			% Return:
			%	 dx Array with the ODE.

			% ODE and algebraic states:
			circuit__z1__mRNA = x(1,:);
			circuit__z1__protein = x(2,:);
			circuit__z2__mRNA = x(3,:);
			circuit__z2__protein = x(4,:);
			circuit__x__mRNA = x(5,:);
			circuit__x__protein = x(6,:);

			% Assigment states:
			circuit__z2__TF = circuit__x__protein;
			circuit__x__TF = circuit__z1__protein;
			circuit__z2__k_m = p.circuit__z2__k_m_max.*circuit__z2__TF./(circuit__z2__TF + p.circuit__z2__h);
			circuit__x__k_m = p.circuit__x__k_m_max.*circuit__x__TF./(circuit__x__TF + p.circuit__x__h);

			% der(circuit__z1__mRNA)
			dx(1,1) =  + (p.circuit__z1__k_m) - (p.circuit__z1__d_m.*circuit__z1__mRNA) + (p.circuit__z1__k_p.*circuit__z1__mRNA) - (p.circuit__z1__k_p.*circuit__z1__mRNA);

			% der(circuit__z1__protein)
			dx(2,1) =  + (p.circuit__z1__k_p.*circuit__z1__mRNA) - (p.circuit__z1__d_p.*circuit__z1__protein) - (p.circuit__gamma.*circuit__z1__protein.*circuit__z2__protein);

			% der(circuit__z2__mRNA)
			dx(3,1) =  + (circuit__z2__k_m) - (p.circuit__z2__d_m.*circuit__z2__mRNA) + (p.circuit__z2__k_p.*circuit__z2__mRNA) - (p.circuit__z2__k_p.*circuit__z2__mRNA);

			% der(circuit__z2__protein)
			dx(4,1) =  + (p.circuit__z2__k_p.*circuit__z2__mRNA) - (p.circuit__z2__d_p.*circuit__z2__protein) - (p.circuit__gamma.*circuit__z1__protein.*circuit__z2__protein);

			% der(circuit__x__mRNA)
			dx(5,1) =  + (circuit__x__k_m) - (p.circuit__x__d_m.*circuit__x__mRNA) + (p.circuit__x__k_p.*circuit__x__mRNA) - (p.circuit__x__k_p.*circuit__x__mRNA);

			% der(circuit__x__protein)
			dx(6,1) =  + (p.circuit__x__k_p.*circuit__x__mRNA) - (p.circuit__x__d_p.*circuit__x__protein);

		end
		function out = simout2struct(~,t,x,p)
			%% Convert the simulation output into an easy-to-use struct.

			% We need to transpose state matrix.
			x = x';
			% ODE and algebraic states:
			circuit__z1__mRNA = x(1,:);
			circuit__z1__protein = x(2,:);
			circuit__z2__mRNA = x(3,:);
			circuit__z2__protein = x(4,:);
			circuit__x__mRNA = x(5,:);
			circuit__x__protein = x(6,:);

			% Assigment states:
			circuit__z2__TF = circuit__x__protein;
			circuit__x__TF = circuit__z1__protein;
			circuit__z2__k_m = p.circuit__z2__k_m_max.*circuit__z2__TF./(circuit__z2__TF + p.circuit__z2__h);
			circuit__x__k_m = p.circuit__x__k_m_max.*circuit__x__TF./(circuit__x__TF + p.circuit__x__h);

			% Save simulation time.
			out.t = t;

			% Vector for extending single-value states and parameters.
			ones_t = ones(size(t'));


			% Save states.
			out.circuit__z1__mRNA = (circuit__z1__mRNA.*ones_t)';
			out.circuit__z1__protein = (circuit__z1__protein.*ones_t)';
			out.circuit__z2__mRNA = (circuit__z2__mRNA.*ones_t)';
			out.circuit__z2__protein = (circuit__z2__protein.*ones_t)';
			out.circuit__z2__k_m = (circuit__z2__k_m.*ones_t)';
			out.circuit__z2__TF = (circuit__z2__TF.*ones_t)';
			out.circuit__x__mRNA = (circuit__x__mRNA.*ones_t)';
			out.circuit__x__protein = (circuit__x__protein.*ones_t)';
			out.circuit__x__k_m = (circuit__x__k_m.*ones_t)';
			out.circuit__x__TF = (circuit__x__TF.*ones_t)';

			% Save parameters.
			out.circuit__z1__k_m = (p.circuit__z1__k_m.*ones_t)';
			out.circuit__z1__d_m = (p.circuit__z1__d_m.*ones_t)';
			out.circuit__z1__k_p = (p.circuit__z1__k_p.*ones_t)';
			out.circuit__z1__d_p = (p.circuit__z1__d_p.*ones_t)';
			out.circuit__z2__d_m = (p.circuit__z2__d_m.*ones_t)';
			out.circuit__z2__k_p = (p.circuit__z2__k_p.*ones_t)';
			out.circuit__z2__d_p = (p.circuit__z2__d_p.*ones_t)';
			out.circuit__z2__h = (p.circuit__z2__h.*ones_t)';
			out.circuit__z2__k_m_max = (p.circuit__z2__k_m_max.*ones_t)';
			out.circuit__x__d_m = (p.circuit__x__d_m.*ones_t)';
			out.circuit__x__k_p = (p.circuit__x__k_p.*ones_t)';
			out.circuit__x__d_p = (p.circuit__x__d_p.*ones_t)';
			out.circuit__x__h = (p.circuit__x__h.*ones_t)';
			out.circuit__x__k_m_max = (p.circuit__x__k_m_max.*ones_t)';
			out.circuit__gamma = (p.circuit__gamma.*ones_t)';

		end
		function plot(~,out)
			%% Plot simulation result.
			figure('Name','circuit__z1');
			subplot(2,1,1);
			plot(out.t, out.circuit__z1__mRNA);
			title("circuit__z1__mRNA");
			ylim([0, +inf]);
			grid on;

			subplot(2,1,2);
			plot(out.t, out.circuit__z1__protein);
			title("circuit__z1__protein");
			ylim([0, +inf]);
			grid on;

			figure('Name','circuit__z2');
			subplot(2,2,1);
			plot(out.t, out.circuit__z2__mRNA);
			title("circuit__z2__mRNA");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,2);
			plot(out.t, out.circuit__z2__protein);
			title("circuit__z2__protein");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,3);
			plot(out.t, out.circuit__z2__k_m);
			title("circuit__z2__k_m");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,4);
			plot(out.t, out.circuit__z2__TF);
			title("circuit__z2__TF");
			ylim([0, +inf]);
			grid on;

			figure('Name','circuit__x');
			subplot(2,2,1);
			plot(out.t, out.circuit__x__mRNA);
			title("circuit__x__mRNA");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,2);
			plot(out.t, out.circuit__x__protein);
			title("circuit__x__protein");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,3);
			plot(out.t, out.circuit__x__k_m);
			title("circuit__x__k_m");
			ylim([0, +inf]);
			grid on;

			subplot(2,2,4);
			plot(out.t, out.circuit__x__TF);
			title("circuit__x__TF");
			ylim([0, +inf]);
			grid on;

		end
	end
end
